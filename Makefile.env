
# Variables
PDK_ROOT ?= $(VENV_PDK_DIR)
PDK_HASH ?= 7519dfb04400f224f140749cda44ee7de6f5e095
PDK ?= sky130A
PDK_LIB ?= sky130_fd_sc_hd
PDK_CORNER ?= tt_025C_1v80

# Commands
AUTOCONF ?= autoconf
CARGO ?= cargo
CD ?= cd
CHMOD ?= chmod
CMAKE ?= cmake
CP ?= cp
ECHO ?= echo
FALSE ?= false
FIND ?= find
GIT ?= git
GREP ?= grep
MKDIR ?= mkdir
PYTHON ?= python3
SED ?= sed
VOLARE ?= volare
YOSYS ?= yosys

# Internal paths
TOP ?= $(shell git rev-parse --show-toplevel)
OSSCAD_DIR       ?= $(TOP)
VENV_DIR         ?= $(OSSCAD_DIR)/.VENV
VENV_BIN_DIR     ?= $(VENV_DIR)/bin
VENV_INCLUDE_DIR ?= $(VENV_DIR)/include
VENV_LIB_DIR     ?= $(VENV_DIR)/lib
VENV_PDK_DIR     ?= $(VENV_DIR)/pdk
VENV_SHARE_DIR   ?= $(VENV_DIR)/share
VENV_TOUCH_DIR   ?= $(VENV_DIR)/touchfiles

# Submodules
BASEJUMP_STL_DIR ?= $(OSSCAD_DIR)/basejump_stl
BSG_CADENV_DIR   ?= $(OSSCAD_DIR)/bsg_cadenv
BSG_PEARLS_DIR   ?= $(OSSCAD_DIR)/bsg_pearls
F4PGA_DIR        ?= $(OSSCAD_DIR)/yosys-f4pga-plugins
IVERILOG_DIR     ?= $(OSSCAD_DIR)/iverilog
MORTY_DIR        ?= $(OSSCAD_DIR)/morty
SURFER_DIR       ?= $(OSSCAD_DIR)/surfer
SURELOG_DIR      ?= $(OSSCAD_DIR)/Surelog
SVASE_DIR        ?= $(OSSCAD_DIR)/svase
VERILATOR_DIR    ?= $(OSSCAD_DIR)/verilator
YOSYS_DIR        ?= $(OSSCAD_DIR)/yosys
YSLANG_DIR       ?= $(OSSCAD_DIR)/yosys-slang

# Environment commands
VENV_ACTIVATE ?= source $(VENV_DIR)/bin/activate

##########################################################
## CAD environment
##########################################################
ifneq ($(MAKECMDGOALS),help)
.PRECIOUS: $(BSG_CADENV_DIR)/cadenv.mk
include $(BSG_CADENV_DIR)/cadenv.mk
%/cadenv.mk:
	# BSG users leverage a machine-specific cadenv
	#   Here, we add sourcing to get these variables as well
	@$(eval CADENV_URL := git@github.com:bespoke-silicon-group/bsg_cadenv)
	@$(eval CADENV_EXISTS := $(shell git ls-remote --exit-code $(CADENV_URL) HEAD 2> /dev/null))
	# Recursive make to include the new fragment
	if [ -f "$(BSG_CADENV_DIR)/cadenv.mk" ]; then \
		echo "bsg_cadenv already exists"; \
	elif [[ ! -z "$(CADENV_EXISTS)" ]]; then \
		echo "Cloning bsg_cadenv from $(CADENV_URL)"; \
		git clone --recurse-submodules $(CADENV_URL) $(@D); \
	else \
		echo "bsg_cadenv not found"; \
		mkdir -p $(@D); \
		touch $@; \
	fi
	@echo "Successfully built $@!"
endif

.PRECIOUS: $(VENV_DIR)/bin/activate
%/bin/activate:
	@$(MKDIR) -p $(VENV_BIN_DIR) $(VENV_TOUCH_DIR) $(VENV_INCLUDE_DIR) $(VENV_LIB_DIR)
	@$(GIT) submodule update --init --recursive
	@$(PYTHON) -m venv $*
	@$(@D)/pip install --upgrade pip
	@$(@D)/pip install -r $(TOP)/requirements.txt

.PRECIOUS: $(VENV_DIR)/bin/cadactivate
%/bin/cadactivate: %/bin/activate
	@$(ECHO) "echo 'setting java variables'" > $@
	@$(ECHO) "echo 'setting PDK environment variables in $@'" >> $@
	@$(ECHO) "export PDK_ROOT=$(PDK_ROOT)" >> $@
	@$(ECHO) "export PDK_HASH=$(PDK_HASH)" >> $@
	@$(ECHO) "export PDK=$(PDK)" >> $@
	@$(ECHO) "export PDK_LIB=$(PDK_LIB)" >> $@
	@$(ECHO) "export PDK_CORNER=$(PDK_CORNER)" >> $@
	@$(ECHO) "echo 'setting cadenv environment variables'" >> $@
	@$(ECHO) "export LM_LICENSE_FILE=$(LM_LICENSE_FILE)" >> $@
	@$(ECHO) "export VCS_HOME=$(VCS_HOME)" >> $@
	@$(ECHO) "export VERDI_HOME=$(VERDI_HOME)" >> $@
	@$(ECHO) "export SYN_RELEASE=$(SYN_RELEASE)" >> $@
	@$(ECHO) "echo 'sourcing venv activate'" >> $@
	@$(ECHO) "source $(abspath $<)" >> $@
	@$(ECHO) "echo 'updating path'" >> $@
	@$(ECHO) "export PATH=\$${SYN_RELEASE}/bin:\$${VCS_HOME}/bin:\$${VERDI_HOME}/bin:\$${PATH}" >> $@
	@$(CHMOD) +x $@

_check_venv: $(VENV_DIR)/bin/cadactivate
	@$(PYTHON) -c "import os; os.environ['VIRTUAL_ENV']" || ($(ECHO) "venv not detected" && $(FALSE))
	@$(ECHO) "venv detected!"

